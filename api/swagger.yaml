openapi: 3.0.0

info:
  version: '0.1'
  title: 'UUID API'
  description: |
    Rich API to generate and parse UUID of any version.
    It tries to be [RFC 4122](https://tools.ietf.org/html/rfc4122) compatible where possible.

tags:
  - name: nil
    description: Special case, UUID filled with nulls.
  - name: Version 1
    description: Time-base version of UUID.
  - name: Version 3
    description: Names-based version of UUID using MD5 hash function.
  - name: Version 4
    description: UUID based on random number generator.
  - name: Version 5
    description: Names-based version of UUID using SHA1 hash function.

paths:
  /api/nil:
    get:
      tags:
        - nil
      description: Special case. Returns UUID filled with nulls.
      responses:
        200:
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v1:
    post:
      tags: 
        - Version 1
      description: |
        Generate UUID version 1 from given timestamp, counter and
        MAC address.
      parameters:
        - name: timestamp
          in: query
          description: |
            ISO 8601 timestamp with milliseconds precision to use in 
            UUID generation. If empty server time will be used.
          schema:
            type: string
            format: date-time
        - name: counter
          in: query
          description: |
            Counter to fullfill timestamp with milliseconds precision
            up to 100 nanoseconds precision. If empty internal counter
            will be used.
          schema:
            type: integer
        - name: mac
          in: query
          description: |
            MAC address to use while UUID generation. If empty MAC address
            of the server will be used.
          schema:
            type: string
            pattern: '([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}'
            example: 'b4:2e:99:28:c8:d6'
      responses:
        200:
          $ref: '#/components/responses/Success'
        400:
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/InternalServerError'

  '/api/v1/{uuid}':
    get:
      tags: 
        - Version 1
      description: |
        Try to parse given UUID according to version 1 format.
      parameters:
        - name: uuid
          in: path
          required: true
          description: UUID to parse.
          schema:
            $ref: '#/components/schemas/UUIDString'
      responses:
        200:
          $ref: '#/components/responses/Success'
        422:
          $ref: '#/components/responses/InvalidUuid'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v3:
    post:
      tags: 
        - Version 3
      description: Generate UUID version 3 (MD5 based) from given name.
      requestBody:
        $ref: '#/components/requestBodies/NameRequest'
      responses:
        200:
          $ref: '#/components/responses/Success'
        400:
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/InternalServerError'

  /api/v4:
    get:
      tags:
        - Version 4
      description: Get pseudo-random UUID
      responses:
        200:
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/InternalServerError'
  
  '/api/v4/{counter}':
    get:
      tags:
        - Version 4
      description:  Get several pseudo-random UUIDs
      parameters:
        - name: counter
          in: path
          required: true
          description: Number of UUIDs
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: New-line delimited list of UUIDs
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UUIDString'

  /api/v5:
    post:
      tags: 
        - Version 5
      description: Generate UUID version 5 (SHA1 based) from given name.
      requestBody:
        $ref: '#/components/requestBodies/NameRequest'
      responses:
        200:
          $ref: '#/components/responses/Success'
        400:
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/InternalServerError'
  

servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/valericus/uuid.im/0.1

components:
  schemas:
    Variant:
      type: string
      enum: 
        - NCS
        - RFC4122
        - MICROSOFT
        - FUTURE
      description: |
        The variant field determines the layout of the UUID.  That is, the
        interpretation of all other bits in the UUID depends on the setting
        of the bits in the variant field.  As such, it could more accurately
        be called a type field; RFC 4122 retains the original term for
        compatibility. See [section 4.1.1](https://tools.ietf.org/html/rfc4122#section-4.1.1).
        * `NCS` - reserved, NCS backward compatibility.
        * `RFC4122` - UUID variand described in RFC 4122.
        * `MICROSOFT` - reserved, Microsoft Corporation backward
                     compatibility
        * `FUTURE` - reserved for future definition

    Version:
      type: string
      enum:
        - TIME_BASED
        - DCE_SECURITY
        - MD5_BASED
        - RANDOM
        - SHA1_BASED
      description: |
        The version is more accurately a sub-type; again, RFC 4122 retains the
        original term for compatibility. See [section 4.1.3](https://tools.ietf.org/html/rfc4122#section-4.1.3).
        * `TIME_BASED` - **version 1**, the time-based version specified
        in RFC 4122.
        * `DCE_SECURITY` - **version 2**, DCE Security version, with embedded
        POSIX UIDs.
        * `MD5_BASED` - **version 3**, the name-based version specified in
        RFC 4122 that uses MD5 hashing.
        * `RANDOM` - **version 4**, the randomly or pseudo-randomly generated
        version specified in RFC 4122.
        * `SHA1_BASED` - **version 5**, the name-based version specified in
        RFC 4122 that uses SHA-1 hashing.

    UUIDString:
      type: string
      format: uuid
      pattern: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      example: "8ab8db5d-0b52-453c-94ff-c1fe5a7550f5"
      description: |
            Hexadecimal representation according to 
            [section 3](https://tools.ietf.org/html/rfc4122#section-3) 
            of RFC 4122

    Uuid:
      type: object
      required:
        - variant
        - version
        - rfc4122
        - littleEndian
        - mixedEndian
        - decimal
        - binary
      properties:
        variant:
          $ref: "#/components/schemas/Variant"
        version:
          $ref: "#/components/schemas/Version"
        rfc4122:
          $ref: "#/components/schemas/UUIDString"
        littleEndian:
          type: array
          items:
            type: integer
            format: byte
          description: Little endian ordered bytes of UUID as array of integers
          maxLength: 16
          minLength: 16
          example: [1, 2, 3]
        mixedEndian:
          type: array
          items:
            type: integer
            format: byte
          description: Weird format from Microsoft. The first three components of the UUID are little-endian, and the last two are big-endian.
          maxLength: 16
          minLength: 16
          example: [1, 2, 3]
        decimal:
          type: string
          pattern: "[0-9]+"
          description: Decimal representation of the UUID
          example: "1324312613492452"
        binary:
          type: string
          pattern: "[01]{128}"
          description: Binary representation of the UUID
          example: "0101010011000110011"

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Human readable description of the error

  requestBodies:
    NameRequest:
      description: |
        Data that should be handled as "name" for UUID version 3 and 5.
        
        One can use either `x-www-form-urlencoded` or `application/json` request type.

        Form request should be used to get name based UUID straight from given name.

        JSON body will be re-formatted to JSON with alphabetically sorted keys
        and without any redundant spaces or indents, result will be used as "name".
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                description: 'String to be used as "name" for UUID'
                type: string
        application/json:
          schema:
            type: object
          example:
            foo: bar
            buz: bud

  responses:
    Success:
      description: Successful result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Uuid'

    BadRequest:
      description: Request contains bad values or is malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InvalidUuid:
      description: Given UUID has wrong variant or version
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: Wrong UUID version, expected 1, got 43

    InternalServerError:
      description: Something has gone wrong. Please try once again later
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'